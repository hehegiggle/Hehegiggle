package com.notificationmicroservice.service;

import com.notificationmicroservice.entity.RealTimeNotification;
import com.notificationmicroservice.repository.RealTimeNotificationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class RealTimeNotificationService {

    @Autowired
    private RealTimeNotificationRepository realTimeNotificationRepo;

    // Save a new real-time notification
    public RealTimeNotification saveNotification(RealTimeNotification notification) {
        return realTimeNotificationRepo.save(notification);
    }

    // Get all real-time notifications
    public List<RealTimeNotification> getAllNotifications() {
        return realTimeNotificationRepo.findAll();
    }

    // Get a real-time notification by ID
    public Optional<RealTimeNotification> getNotificationById(String id) {
        return realTimeNotificationRepo.findById(id);
    }

    // Delete a real-time notification by ID
    public void deleteNotificationById(String id) {
        realTimeNotificationRepo.deleteById(id);
    }

    // Update a real-time notification
    public RealTimeNotification updateNotification(String id, RealTimeNotification updatedNotification) {
        Optional<RealTimeNotification> optionalNotification = realTimeNotificationRepo.findById(id);
        if (optionalNotification.isPresent()) {
            RealTimeNotification notification = optionalNotification.get();
            notification.setNotificationId(updatedNotification.getNotificationId());
            notification.setType(updatedNotification.getType());
            notification.setUserId(updatedNotification.getUserId());
            notification.setPostId(updatedNotification.getPostId());
            notification.setCommentId(updatedNotification.getCommentId());
            notification.setSenderId(updatedNotification.getSenderId());
            return realTimeNotificationRepo.save(notification);
        } else {
            return null;
        }
    }
}
