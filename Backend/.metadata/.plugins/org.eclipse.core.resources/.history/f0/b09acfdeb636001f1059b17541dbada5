package com.notificationmicroservice.controller;

import com.notificationmicroservice.entity.RealTimeNotification;
import com.notificationmicroservice.service.RealTimeNotificationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/realtime-notifications")
public class RealTimeNotificationController {

    @Autowired
    private RealTimeNotificationService realTimeNotificationService;

    @PostMapping
    public RealTimeNotification createNotification(@RequestBody RealTimeNotification notification) {
        return realTimeNotificationService.saveNotification(notification);
    }

    @GetMapping("/get-all")
    public List<RealTimeNotification> getAllNotifications() {
        return realTimeNotificationService.getAllNotifications();
    }

    @GetMapping("/get-byId/{id}")
    public Optional<RealTimeNotification> getNotificationById(@PathVariable String id) {
        return realTimeNotificationService.getNotificationById(id);
    }

    @PutMapping("/update/{id}")
    public RealTimeNotification updateNotification(@PathVariable String id, @RequestBody RealTimeNotification updatedNotification) {
        return realTimeNotificationService.updateNotification(id, updatedNotification);
    }

    @DeleteMapping("/delete/{id}")
    public void deleteNotificationById(@PathVariable String id) {
        realTimeNotificationService.deleteNotificationById(id);
    }
    
    @PutMapping("/mark-as-read/{id}")
    public RealTimeNotification markAsRead(@PathVariable String id) {
        Optional<RealTimeNotification> optionalNotification = realTimeNotificationService.getNotificationById(id);
        if (optionalNotification.isPresent()) {
            RealTimeNotification notification = optionalNotification.get();
            notification.setRead(true);
            return realTimeNotificationService.saveNotification(notification);
        } else {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Notification not found");
        }
    }
}
