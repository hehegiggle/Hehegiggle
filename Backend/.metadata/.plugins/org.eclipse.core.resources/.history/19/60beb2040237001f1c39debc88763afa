package com.notificationmicroservice.controller;

import com.notificationmicroservice.entity.RealTimeNotification;
import com.notificationmicroservice.service.RealTimeNotificationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/realtime-notifications")
public class RealTimeNotificationController {

    @Autowired
    private RealTimeNotificationService realTimeNotificationService;

    @PostMapping
    public RealTimeNotification createNotification(@RequestBody RealTimeNotification notification) {
        return realTimeNotificationService.saveNotification(notification);
    }

    @GetMapping("/get-all")
    public List<RealTimeNotification> getAllNotifications() {
        return realTimeNotificationService.getAllNotifications();
    }

    @GetMapping("/get-byId/{id}")
    public Optional<RealTimeNotification> getNotificationById(@PathVariable("id") String id) {
        return realTimeNotificationService.getNotificationById(id);
    }

    @PutMapping("/update/{id}")
    public RealTimeNotification updateNotification(@PathVariable("id") String id, @RequestBody RealTimeNotification updatedNotification) {
        return realTimeNotificationService.updateNotification(id, updatedNotification);
    }

    @DeleteMapping("/delete/{id}")
    public void deleteNotificationById(@PathVariable("id") String id) {
        realTimeNotificationService.deleteNotificationById(id);
    }
    
    @PutMapping("/mark-as-read")
    public void markAllAsRead() {
        List<RealTimeNotification> notifications = realTimeNotificationService.getAllNotifications();
        for (RealTimeNotification notification : notifications) {
        	System.out.println("Inside for loop-----------------");
            notification.setRead(true);
            realTimeNotificationService.saveNotification(notification);
        }
    }
}
